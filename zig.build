const std = @import("std");

pub fn build(b: *std.Build) void {
    // Standard target options
    const target = b.standardTargetOptions(.{});
    
    // Standard optimization options
    const optimize = b.standardOptimizeOption(.{});
    
    // Change the executable name and path to match your project
    const exe = b.addExecutable(.{
        .name = "rose",
        .root_source_file = .{ .path = "cmd/rose/main.zig" }, // Adjust based on your project structure
        .target = target,
        .optimize = optimize,
    });
    
    // Create build options
    const build_options = b.addOptions();
    
    // CPU features (important for LLM inference performance)
    const cpu_features = b.option(bool, "cpu-specific", "Enable CPU-specific optimizations") orelse false;
    if (cpu_features) {
        // Modern Intel/AMD features beneficial for LLM inference
        exe.target_info.cpu_features_add.addFeature("avx2", true);
        exe.target_info.cpu_features_add.addFeature("avx512f", true); // Added for better matrix operations
        exe.target_info.cpu_features_add.addFeature("sse4.2", true);
        exe.target_info.cpu_features_add.addFeature("fma", true);
        exe.target_info.cpu_features_add.addFeature("bmi2", true); // Added for bit manipulation
        build_options.addOption(bool, "cpu_specific_optimizations", true);
    }
    
    // NVIDIA CUDA support for GPU acceleration of LLM models
    const enable_cuda = b.option(bool, "cuda", "Enable NVIDIA CUDA support") orelse false;
    if (enable_cuda) {
        exe.addIncludePath(.{ .path = "/usr/local/cuda/include" });
        exe.addLibraryPath(.{ .path = "/usr/local/cuda/lib64" });
        exe.linkSystemLibrary("cudart");
        exe.linkSystemLibrary("cuda");
        exe.linkSystemLibrary("cublas"); // Added for LLM matrix operations
        build_options.addOption(bool, "enable_cuda", true);
    }
    
    // Intel GPU support
    const enable_intel_gpu = b.option(bool, "intel-gpu", "Enable Intel GPU support") orelse false;
    if (enable_intel_gpu) {
        exe.addIncludePath(.{ .path = "/opt/intel/oneapi/compiler/latest/include" });
        exe.addLibraryPath(.{ .path = "/opt/intel/oneapi/compiler/latest/lib" });
        exe.linkSystemLibrary("sycl");
        build_options.addOption(bool, "enable_intel_gpu", true);
    }
    
    // Add post-quantum cryptography support
    const enable_quantum_crypto = b.option(bool, "quantum-crypto", "Enable post-quantum cryptography") orelse false;
    if (enable_quantum_crypto) {
        exe.addIncludePath(.{ .path = "/usr/local/include/oqs" });
        exe.addLibraryPath(.{ .path = "/usr/local/lib" });
        exe.linkSystemLibrary("oqs");
        build_options.addOption(bool, "enable_quantum_crypto", true);
    }
    
    // Add options to executable
    exe.addOptions("build_options", build_options);
    
    // Add build step
    b.installArtifact(exe);
    
    // Add a test step
    const test_step = b.step("test", "Run unit tests");
    const tests = b.addTest(.{
        .root_source_file = .{ .path = "src/test.zig" },
        .target = target,
        .optimize = optimize,
    });
    const run_tests = b.addRunArtifact(tests);
    test_step.dependOn(&run_tests.step);
}

